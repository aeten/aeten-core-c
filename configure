#!/bin/bash

CURDIR=$(readlink -f $(dirname "${0}"))
AETEN_MAKE=${CURDIR}/cots/aeten-make
AETEN_CLI_DIR=${CURDIR}/cots/aeten-cli
AETEN_CLI=${AETEN_CLI_DIR}/aeten-cli.sh

# If git repository
DESCRIPTION=$([ -e ${CURDIR}/.git ] && hash git 2>/dev/null && git describe --long --dirty=-* --all --always 2>/dev/null)
IS_GIT_REPO=$([ -n "${DESCRIPTION=}" ] && echo true || echo false)
if ${IS_GIT_REPO}; then
	PROJECT_NAME=$(basename "$(realpath "${CURDIR}")")
	TAG=$(git describe --tags 2>/dev/null; true)
	DESCRIPTION=${DESCRIPTION/*\//}
	: ${TAG:=0}
	: ${DESCRIPTION:=0}
	cat - > .description <<EOF
project: ${PROJECT_NAME}
tag: ${TAG}
description: ${DESCRIPTION}
EOF
# Not a git repository
else
	PROJECT_NAME=$(sed -n 's/^project: //p' .description)
	TAG=$(sed -n 's/^tag: //p' .description)
	DESCRIPTION=$(sed -n 's/^description: //p' .description)
fi

$(${AETEN_CLI_DIR}/aeten-ads init - -- "${@}" << EOF
#NAME: $(basename ${0})
#TITLE:  ${PROJECT_NAME^^} $(basename ${0}) manual
#VERSION: ${TAG}
#SHORT_DESCRIPTION: Ã†ten core library building configuration script.
#DESCRIPTION: Configures and generates building file (Ninja or GNU Make).
conf|C <config-file>: The configuration bash file path to source, _config.sh_ by default.
binary <type>: The binary type, _library_ by default or _executable_.
prefix <prefix-path>: The prefix path for installation, _/usr/local_ by default.
src <directory>: The sources directory
test <directory>: The sources directory for tests
out <directory>: The output build directory, _${CURDIR}/build_ by default.
plantuml|P <jar-file>: The PlantUML jar file path.
object-model|m <model>: The object model generation mode, _simple_ support only one parent per interface whereas _complete_ support several and provides castable ojects (ie. cast a list to iterable).
cc <cc-exec-file>: The C compiler executable file path, _gcc_ by default.
ld <ld-exec-file>: The linker executable file path, _gcc_ by default.
ar <ar-exec-file>: The archive executable file path, _ar_ by default.
ninja <file>: The Ninja build project file to include
warning <list>: The warning flags to activate, _all_ and _error_ by default.
verbose: Verbose build output.
version|V: Shows ${PROJECT_NAME} version.
EOF
)

: ${BINARY:=library}
: ${PREFIX:=/usr/local}
: ${WARNING:=all error}
: ${CONFIG:=${CURDIR}/config.sh}
: ${SRC:=src}
: ${TEST:=test}
: ${OUT:=build}
: ${VERSION:=false}
: ${VERBOSE:=false}
: ${GEN_DIR:=${OUT}/generated}
: ${CC:=gcc}
: ${LD:=gcc}
: ${AR:=ar}
: ${JAVA:=java}
: ${JAVA_SYSTEM_CLASSPATH:=/usr/share/java/*}
: ${NINJA:=${PROJECT_NAME}.ninja}
: ${PLANTUML:=cots/plantuml/plantuml.jar}
SRC=$(readlink -m "${CURDIR}/${SRC}")
TEST=$(readlink -m "${CURDIR}/${TEST}")
OUT=$(readlink -m "${CURDIR}/${OUT}")
SRC_DIR=${SRC/${CURDIR}\//}
TEST=${TEST/${CURDIR}\//}
OUT=${OUT/${CURDIR}\//}
CURDIR=$(dirname "${0}")

if [ ${VERBOSE} = true ]; then
	VERBOSE=-v
else
	VERBOSE=
fi

IQUOTES="${SRC_DIR} ${SRC_DIR}/aeten ${GEN_DIR}/${SRC_DIR} ${GEN_DIR}/${SRC_DIR}/aeten ${GEN_DIR}/${TEST} ${GEN_DIR}/${TEST}/aeten"
LDFLAGS+='-lpthread -pthread'
CFLAGS+='-pthread'

${VERSION} && { echo ${PROJECT_NAME}: version ${TAG}; exit 0; }

[ -f "${CONFIG}" ] && . "${CONFIG}"

INSTALL_LIB_DIR="${PREFIX}/lib"
INSTALL_BIN_DIR="${PREFIX}/bin"

$(${AETEN_CLI} import check inform fatal confirm query)

BUILDER=ninja
: ${PREFIX:=$(query 'Enter the prefix installation path.')}

case "${BUILDER}" in
	ninja)
		project_ninja=${TEMPLATE}
		build_script=build.ninja;;
	make)
		project_ninja=build.mk
		build_script=makefile
		check -m 'Generates GNU Make project_ninja' "${AETEN_MAKE}/ninja2make ${CURDIR}/${TEMPLATE}|sed 's,@@check@@,./${AETEN_CLI} check ${VERBOSE},g' > ${CURDIR}/${project_ninja}";;
	*) fatal 'Builder must be "ninja" or "make"';;
esac

add_prefix="${AETEN_MAKE}/generate-builder add-prefix"
add_suffix="${AETEN_MAKE}/generate-builder add-suffix"
replace_suffix="${AETEN_MAKE}/generate-builder replace-suffix"
replace_prefix="${AETEN_MAKE}/generate-builder replace-prefix"
target="${AETEN_MAKE}/generate-builder target --builder ${BUILDER}"

# Submodules setup
if ${IS_GIT_REPO}; then
	SUBMODULES=$(git submodule status|awk '{print $2}')
	SUBMODULES_SCRIPT=cots/aeten-git-tools/aeten-submodules.sh
	git_submodule=". ${AETEN_CLI} && aeten_cli_import ${AETEN_CLI} all && . ./${SUBMODULES_SCRIPT} && git-submodule"

	if [ -f "${AETEN_CLI}" ]; then
		for module in ${SUBMODULES}; do
			bash -c "${git_submodule}-check ${module}" > /dev/null
		done
	else
		git submodule init ${AETEN_CLI_DIR}
	fi
fi

COMMANDS=$(. ${AETEN_CLI} && __aeten_cli_api ${AETEN_CLI} | grep -v '^import$')
LINKS=$(${add_prefix} ${INSTALL_BIN_DIR}/ ${COMMANDS})
SRC=$(find ${SRC_DIR}/ ${TEST}/ -type f -name \*.c)
CLASSES=$(for src in ${SRC}; do sed -n '/@startuml/ {$! {: begin; n; /@enduml/b end; /class\|interface/ {s,\s*\(class\|interface\)\s\+[a-z.]*\([^ \t<{]\+\)[{< ].*,'$(dirname ${src})'/\2,p}; b begin; : end } }' ${src}; done)
OBJ=$(       ${replace_suffix} '' .o   $(${add_prefix} \\\${output}/    ${CLASSES}))
HEADERS=$(   ${replace_suffix} '' .h   $(${add_prefix} \\\${generated}/ ${CLASSES}))
XMI_FILES=$( ${replace_suffix} '' .xmi $(${add_prefix} \\\${output}/    ${CLASSES}))
PUML_PATH="-Dplantuml.include.path=${SRC_DIR}:${SRC_DIR}/aeten:${GEN_DIR}/${SRC_DIR}:${GEN_DIR}/${SRC_DIR}/aeten"
PUML_FLAGS=

check -m "Generates ${build_script}" cat - <<EOF '>' ${CURDIR}/${build_script}
project   = ${PWD##*/}
version   = ${TAG}
cflags    = ${CFLAGS} $(${add_prefix} -W ${WARNING}) $(${add_prefix} -iquote\  ${IQUOTES})
ldflags   = ${LDFLAGS}
cc        = ${CC}
ld        = ${LD}
ar        = ${AR}
xmi2c     = $(dirname "$0")/xmi2c
java      = ${JAVA}
puml      = ${PLANTUML}
pumlpath  = ${PUML_PATH}
pumlflags = ${PUML_FLAGS}
output    = ${OUT}
generated = ${GEN_DIR}
ipath     = ${IQUOTES}
src       = $(echo ${SRC}|tr ' ' ':')
srcdir    = ${SRC_DIR}
testdir   = ${TEST}
classpath = ${JAVA_SYSTEM_CLASSPATH}

include default-rules.ninja
include default-targets.ninja
default ${BINARY}

build deps: phony || $(echo \${output}/\${project}-\${version}{.d,.a.d,.so.d}) $(for src in $(find ${SRC} ${TEST} -name \*.c); do
	echo -n " \${output}/${src%%.c}.o.d"
done)


build test: phony || $(for src in $(find ${TEST} -name \*.c); do
   echo run-$(basename ${src//_/-} .c)
done|paste -sd' ' -)
$([ -f "${NINJA}" ] && echo include "${NINJA}")

$(for _src in $(find ${SRC} -name \*.c); do
	_classes=$(sed -n '/@startuml/ {$! {: begin; n; /@enduml/b end; /class\|interface/ {s,\s*\(class\|interface\)\s\+[a-z.]*\([^ \t<{]\+\)[{< ].*,\2,p}; b begin; : end } }' "${_src}")

	inform "Building target puml2x commands from ${_src}" >&2
	for _ext in xmi pdf png; do
		${target} --command puml2x --depends ${_src} "$(echo "${_classes}"|sed 's,^.*,${output}/'$(dirname ${_src})/'\0.'${_ext}','|tr '\n' ' ')"
	done

	for _class in ${_classes}; do
		_xmi="\${output}/$(dirname ${_src})/${_class}.xmi"
		inform "Building target xmi2c command from ${_xmi}" >&2
		${target} --command xmi2c --depends ${_xmi} '${generated}/'$(dirname ${_src})/${_class}.h
	done

	inform "Building target cc from ${_src}" >&2
	_out='${output}/'$(${replace_suffix} .c .o ${_src})
	${target} --command objdep --depends ${_src} ${_out}.d
	${target} --command cc --depends ${_src} --depends "| ${_out}.d" ${_out}
done

for _src in $(find ${TEST} -name \*.c); do
	executable=$(basename ${_src//_/-} .c);
	depedencies="$(${replace_suffix} .c .o ${_src}) "

	inform "Building target bindep from ${_src}" >&2
	${target} --command bindep --depends '${output}/'$(${replace_suffix} .c .o.d ${_src}) '${output}/'"${TEST}/${executable}.d"

	inform "Building target ld from ${_src}" >&2
	_out='${output}/'"${TEST}/${executable}"
	${target} --command ld --depends '${output}/'$(${replace_suffix} .c .o ${_src}) --depends '| '${_out}.d "${_out}"

	inform "Building target run from ${_src}" >&2
	${target} --command run --depends '${output}/'"${TEST}/${executable}" run-${executable}
done)

EOF

if [ ${BUILDER} = make ]; then
	rm ${project_ninja}
else
	exit 0
fi
