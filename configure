#!/bin/bash

set -e

CURDIR=$(dirname "${0}")
AETEN_MAKE=${CURDIR}/cots/aeten-make
AETEN_CLI_DIR=${CURDIR}/cots/aeten-cli
AETEN_CLI=${AETEN_CLI_DIR}/aeten-cli.sh

# If git repository
DESCRIPTION=$(git describe --long --dirty=-* --all --always 2>/dev/null)
if [ -n "${DESCRIPTION}" ]; then
	PROJECT_NAME=$(basename "$(realpath "${CURDIR}")")
	TAG=$(git describe --tags 2>/dev/null; true)
	DESCRIPTION=${DESCRIPTION/*\//}
	: ${TAG:=0}
	: ${DESCRIPTION:=0}
	cat - > .description <<EOF
project: ${PROJECT_NAME}
tag: ${TAG}
description: ${DESCRIPTION}
EOF
# Not a git repository
else
	PROJECT_NAME=$(sed -n 's/^project: //p' .description)
	TAG=$(sed -n 's/^tag: //p' .description)
	DESCRIPTION=$(sed -n 's/^description: //p' .description)
fi

$(${AETEN_CLI_DIR}/aeten-ads init - -- "${@}" << EOF
#NAME: $(basename ${0})
#TITLE:  ${PROJECT_NAME^^} $(basename ${0}) manual
#VERSION: ${TAG}
#SHORT_DESCRIPTION: Ã†ten core library building configuration script.
#DESCRIPTION: Configures and generates building file (Ninja or GNU Make).
builder <builder>: The target builder tool, _ninja_ or _make_.
prefix <prefix-path>: The prefix path for installation, _/usr/local_ by default.
out <directory>: The output build directory, _${CURDIR}/build_ by default.
conf <config-file>: The configuration bash file path to source, _config.sh_ by default.
plantuml <jar-file>: The PlantUML jar file path.
object-model|M <model>: The object model generation mode, _simple_ support only one parent per interface whereas _complete_ support several and provides castable ojects (ie. cast a list to iterable).
generic-replacement|R <replacement>: The parameterized type replacement, _aeten\\_\\_Object\*_ by default (may be _void\*_ for example).
gcc <gcc-exec-file>: The GCC executable file path.
warning <list>: The warning flags to activate, _all_ and _error_ by default.
verbose: Verbose build output.
version|V: Shows ${PROJECT_NAME} version.
EOF
)

: ${PREFIX:=/usr/local}
: ${WARNING:=error}
: ${CONFIG:=${CURDIR}/config.sh}
: ${OUT:=${CURDIR}/build}
: ${GENERIC_REPLACEMENT:=aeten__Object*}
: ${VERSION:=false}
: ${VERBOSE:=false}
if [ ${VERBOSE} = true ]; then
	VERBOSE=-v
else
	VERBOSE=
fi

IQUOTES='src src/aeten generated/src generated/src/aeten generated/test generated/test/aeten'
LDFLAGS+='-lpthread'

${VERSION} && { echo ${PROJECT_NAME}: version ${TAG}; exit 0; }

[ -f "${CONFIG}" ] && . "${CONFIG}"

INSTALL_LIB_DIR="${PREFIX}/lib"
INSTALL_BIN_DIR="${PREFIX}/bin"

$(${AETEN_CLI} import check fatal confirm query)

: ${BUILDER:=$(confirm --no 'Use Ninja instead of GNU Make?' && echo ninja || echo make)}
: ${PREFIX:=$(query 'Enter the prefix installation path.')}
: ${PLANTUML:=$(query 'Enter the plantuml jar path.')}

TEMPLATE=build-template.ninja
case "${BUILDER}" in
	ninja)
		template=${TEMPLATE}
		build_script=build.ninja;;
	make)
		template=build.mk
		build_script=makefile
		check -m 'Generates GNU Make template' "${AETEN_MAKE}/ninja2make ${CURDIR}/${TEMPLATE}|sed 's,@@check@@,./${AETEN_CLI} check ${VERBOSE},g' > ${CURDIR}/${template}";;
	*) fatal 'Builder must be "ninja" or "make"';;
esac

check="${AETEN_CLI} check"
add_prefix="${AETEN_MAKE}/generate-builder add-prefix"
add_suffix="${AETEN_MAKE}/generate-builder add-suffix"
replace_suffix="${AETEN_MAKE}/generate-builder replace-suffix"
replace_prefix="${AETEN_MAKE}/generate-builder replace-prefix"
target="${AETEN_MAKE}/generate-builder target --builder ${BUILDER}"

# Submodules setup
if [ -n "${DESCRIPTION}" ]; then
	SUBMODULES=$(git submodule status|awk '{print $$2}')
	SUBMODULES_SCRIPT=cots/aeten-git-tools/aeten-submodules.sh
	git_submodule=". ${AETEN_CLI} && aeten_cli_import ${AETEN_CLI} all && . ./${SUBMODULES_SCRIPT} && git-submodule-"

	if [ -f "${AETEN_CLI}" ]; then
		for module in ${SUBMODULES}; do
			(${git_submodule}-check ${module}>/dev/null)
		done
	else
		git submodule init ${AETEN_CLI_DIR}
	fi
fi

get-headers() {
	local source_file="$1"; shift
	local source_dir=$(dirname "${source_file}")
	local iquotes=$(${add_prefix} -iquote\  $(echo ${@}) generated/${source_dir/test\//src\/} generated/${source_dir})
	echo gcc -MM ${iquotes} "${source_file}" | sed '1 s,.\+: '"${source_file//./\\.}"',,; s/\\$//' >&2
	gcc -MM ${iquotes} "${source_file}" | sed '1 s,.\+: '"${source_file//./\\.}"',,; s/\\$//'
}

build-target() {
	local command=$1; shift
	local in_prefix=$1; shift
	local in_suffix=$1; shift
	local out_prefix=$1; shift
	local out_suffix=$1; shift
	local ext
	local output
	for input in $@; do
		output=" ${out_prefix}$(dirname ${input}|sed 's,^\\\${output}/,,')/$(basename --suffix=.${in_suffix} ${input}).${out_suffix}"
		${target} --command ${command} --depends ${input} ${output}
	done
}

COMMANDS=$(. ${AETEN_CLI} && __aeten_cli_api ${AETEN_CLI} | grep -v '^import$')
LINKS=$(${add_prefix} ${INSTALL_BIN_DIR}/ ${COMMANDS})
SRC=$(find src/ test/ -type f -name \*.c)
PUML=$(find src/ test/ -type f -name \*.puml)
OBJ=$(       ${replace_suffix} .c .o   $(${add_prefix} \\\\\${output}/    ${SRC}))
HEADERS=$(   ${replace_suffix} .c .h   $(${add_prefix} \\\\\${generated}/ ${SRC}))
XMI_FILES=$( ${replace_suffix} .c .xmi $(${add_prefix} \\\\\${output}/    ${SRC}) $(${add_prefix} \\\\\${output}/ $(${replace_suffix} .puml .xmi ${PUML})))
PUML_PATH="-Dplantuml.include.path=src:src/aeten:generated/src:generated/src/aeten"
PUML_FLAGS=$(${add_suffix} "=${GENERIC_REPLACEMENT}" $(${add_prefix} -D {A..Z}))

BUILD_TARGETS=$( (
	build-target puml2xmi    ''   c    '\\\${output}/'    xmi ${SRC};
	build-target puml2xmi    src/ puml '\\\${output}/'    xmi ${PUML};
	build-target xmi2c       src/ xmi  '\\\${generated}/' '{h,c}' ${XMI_FILES};
#	build-target puml2c      src/ puml '\\\${generated}/' c   ${PUML};
	for _src in $(${replace_suffix} .puml .c ${PUML}); do
		${target} --command cc --depends \\\${generated}/${_src} '\\\${output}/'$(dirname ${_src})/$(basename --suffix=.c ${_src}).o
	done
	for _src in $(find src test -name \*.c); do
		depedencies="${_src} "
		for header in $(get-headers ${_src} ${IQUOTES} generated/$(dirname ${_src}) generated/$(dirname ${_src}|sed 's,^test/,src/,')); do
			test -f "${header}" && depedencies+="$(${replace_prefix} 'generated/' '\\\${generated}/' ${header}) "
			impl=$(${replace_suffix} .h .c ${header})
			test -f "${impl}" && depedencies+="$(${replace_prefix} 'generated/' '\\\${generated}/' ${impl}) "
		done;
		${target} --command cc $(${add_prefix} '--depends ' $(echo ${depedencies}|uniq)) '\\\${output}/'$(${replace_suffix} .c .o ${_src})
	done
	for _src in $(find test -name \*.c); do
		executable=$(basename ${_src//_/-} .c);
		depedencies="$(${replace_suffix} .c .o ${_src}) "
		for header in $(get-headers ${_src} ${IQUOTES}); do
			test -f "${header}" && depedencies+=" $(${replace_prefix} 'generated/' '' $(${replace_suffix} .h .o ${header})) "
		done;
		${target} --command ld $(${add_prefix} '--depends \\\${output}/' $(${replace_prefix} 'generated/' '' ${depedencies}|uniq)) '\\\${output}/test/'${executable};
		${target} --command run --depends "\\\${output}/test/${executable}" run-${executable};
	done
) |sed '$ ! s/$/\\/')

RUN_TESTS="$(for src in $(find test -name \*.c); do
	echo run-$(basename ${src//_/-} .c);
done|paste -sd' ' -)"

check -m "Generates ${build_script}" ${AETEN_MAKE}/generate-builder -t ${CURDIR}/${template} "${@}" '>' ${CURDIR}/${build_script} <<EOF
PROJECT         = ${PWD##*/}
BUILDER         = ${BUILDER}
CFLAGS          = ${CFLAGS} $(${add_prefix} -W ${WARNING}) $(${add_prefix} -iquote\  ${IQUOTES})
LDFLAGS         = ${LDFLAGS}
PUML_PATH       = ${PUML_PATH}
PUML_FLAGS      = ${PUML_FLAGS}
JAVA            = java
PLANTUML        = ${PLANTUML}
XMI2C           = $(dirname "$0")/xmi2c
CC              = gcc
LD              = gcc
INSTALL_LIB_DIR = ${LIB_DIR}
OBJ             = $(echo ${OBJ})
BUILD_TARGETS   = ${BUILD_TARGETS}
RUN_TESTS       = ${RUN_TESTS}
OUT             = ${OUT}
GENERATED       = ${CURDIR}/generated
API             = $(${add_prefix} '\\\${generated}/' $(${replace_suffix} .c .h ${SRC})) $(${add_prefix} '\\\${generated}/' $(${replace_suffix} .puml .h ${PUML})) $(${add_prefix} '\\\${generated}/' $(${replace_suffix} .puml .c ${PUML}))
SRC             = $(echo ${SRC}|tr ' ' ':')
IPATH           = ${IQUOTES// /:}
EOF

if [ ${BUILDER} = make ]; then
	rm ${template}
else
	exit 0
fi
