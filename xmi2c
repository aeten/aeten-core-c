#!/bin/bash

set -e

CURDIR=$(dirname "${0}")
AETEN_CLI_DIR=${CURDIR}/cots/aeten-cli

PROJECT_NAME=$(sed -n 's/^project: //p' .description)
TAG=$(sed -n 's/^tag: //p' .description)
DESCRIPTION=$(sed -n 's/^description: //p' .description)

$(${AETEN_CLI_DIR}/aeten-ads init - -- "${@}" << EOF
#NAME: $(basename ${0})
#TITLE:  ${PROJECT_NAME^^} $(basename ${0}) manual
#VERSION: ${TAG}
#SHORT_DESCRIPTION: Æten core library XMI to C files generation.
#DESCRIPTION: Generates C file (header and a source skeleton) from UML XMI descriplion file.
mode <mode>: The generation mode, _simple_ support only one parent per interface whereas _complete_ support several and provides castable ojects (ie. cast a list to iterable).
!in <file>: The input UML XMI file.
!out <file>: The output file must be formed of *.h for header or *.c for c file skeleton.
version|V: Shows ${PROJECT_NAME} version.
EOF
)

: ${MODE:=complete}
case "$MODE" in
	simple) ;;
	complete) echo 'Complete mode is not yet supported' >&2; exit 1;;
	*)        echo "Invalid mode '${MODE}'" >&2; exit 1;;
esac

XMI="${IN}"
[ -f "$XMI" ] || { echo "Input XMI file '${XMI}' is not a file"; exit 1; }


CLASSES=$(xmlstarlet el -v "${XMI}" | awk '/Class\[/ {
	match($0, /@name='"'([^']*)'"'/, classname);
	match($0, /@namespace='"'([^']*)'"'/, namespace);
	match($0, /@xmi.id='"'([^']*)'"'/, id);
	match($0, /@isInterface='"'([^']*)'"'/, is_interface);

	if (is_interface[1] == "true") {
		classtype = "interface";
	} else {
		classtype = "class";
	}
	if (classname[1] !~ /\$\$\$/) {print classtype ":" id[1] ":" namespace[1] ":" classname[1];}
}')

CLASS=$(echo "${CLASSES//* /}"|tail -n 1)
OBJECT=$(echo "${CLASSES}"|awk -F: '{if (($3 == "aeten") && ($4 == "Object")) {print}}')
CLASS_TYPE=${CLASS/:*/}
CLASS_ID=${CLASS/${CLASS_TYPE}:/}
CLASS_ID=${CLASS_ID/:*/}
NAMESPACE=${CLASS/${CLASS_TYPE}:${CLASS_ID}:/}
NAMESPACE=${NAMESPACE/:*/}
CLASS_NAME=${CLASS//*:/}
C_CLASS=${NAMESPACE//./_}__${CLASS_NAME}


visit_class() {
	local _visitor="${1}_class_visitor"; shift
	local _class="$1"; shift
	eval ${_visitor} "${_class}"
}

class_visitor_init='
	local class=$1
	local classtype=${class/:*/}
	local classid=${class/${classtype}:/}
	classid=${classid/:*/}
	local namespace=${class/${classtype}:${classid}:/}
	namespace=${namespace/:*/}
	local classname=${class//*:/}
	local c_class=${namespace//./_}__${classname}
'
methods_class_visitor_init='
	local methods=$(xmlstarlet sel -B -t -m "//UML:Class[@xmi.id='"'"'${classid}'"'"']/UML:Classifier.feature/UML:Operation" -v "concat(./@name, '"'"' «'"'"', ./@ownerScope, '"'"'» '"'"', '"'"'«'"'"', @visibility, '"'"'»'"'"')" -n "${XMI}"|sed "s/&lt;/</g;s/&gt;/>/g"; true)
	if [ ${classtype} = class ] && { echo "${methods}"|grep -q -v "${classname}\s*(\s*${c_class}\*" ; }; then
		methods+=$(echo -e "${classname}() «classifier» «public»\n")
	fi
'

attributes_class_visitor_init='
	attributes=$(xmlstarlet sel -B -t -v "//UML:Class[@xmi.id='"'"'${classid}'"'"']/UML:Classifier.feature/UML:Attribute/@name" "${XMI}"|sed "s/&lt;/</g;s/&gt;/>/g"; true)
'


visit_method() {
	local _visitor="${1}_method_visitor"; shift
	local _class="$1"; shift
	local _method=$(echo "$1"|sed 's/&lt;/</g;s/&gt;/>/g')
	eval ${_visitor} "${_class}" $(echo "${_method}" | gawk '{
		match($0, /(([^ ]+) +)?([^ (]+) *\( *([^)]*)? *\) *(«.*)?/, signature);
		if (signature[2] == "") {
			type = "void";
		} else {
			type = signature[2];
		}
		name = signature[3];
		args = signature[4];
		stereotype = signature[5];
		gsub(/[«»]/,"",stereotype);
		print "'"'"'" name "'"' '"'" type "'"' '"'" args "'"' '"'" stereotype "'"'"'";
	}')
}

method_visitor_init='
	local _class="${1}"; shift
	local _name="${1}"; shift
	local _type="${1}"; shift
	local _args="${1}"; shift
	local _stereotype="${1}"; shift
	local _function
	local _static_prefix
	local _constructor
	local _default
	local _static
	local _public

	_type=${_type/\[\]/*}
	if [ "${_name}" = "${CLASS_NAME}" ] && [ "${_stereotype/*constructor*/constructor}" != constructor ]; then
		_stereotype+=" constructor"
	fi
	if [ "${_stereotype/*classifier*/classifier}" = classifier ]; then
		_static=true
	else
		_static=false
	fi
	if [ "${_stereotype/*public*/public}" = public ]; then
		_public=true
	else
		_public=false
	fi
	if [ "${_stereotype/*default*/default}" = default ]; then
		_default=true
	else
		_default=false
	fi
	if [ ${_name} = ${CLASS_NAME} ] || [ "${_stereotype/*constructor*/constructor}" = constructor ]; then
		_constructor=true
	else
		_constructor=false
	fi
	if ${_constructor}; then
		_type="${c_class}*"
		_function=${C_CLASS}
	else
		if ${_static} || [ ${CLASS_TYPE} = interface ]; then
			_function=${C_CLASS}__${_name}
		else
			_function=${_name}
			_static_prefix="static "
		fi
	fi
	if [ -z "${_args}" ]; then
		_args="${c_class}* _self"
	else
		_args="${c_class}* _self, ${_args}";
	fi
	_type=${_type/<*>/}
'

typedef_method_visitor() {
	eval "${method_visitor_init}"
	[ "${_stereotype}" = "constructor" ] && return
	( ! ${_static} ) && echo -e "typedef ${_type} (*${_class}__${_name})(${_args});"
}

callback_method_visitor() {
	eval "${method_visitor_init}"
	[ "${_stereotype}" = "constructor" ] && return
	( ! ${_static} ) && echo -e "\t${_class}__${_name} ${_name};"
}

declaration_method_visitor() {
	eval "${method_visitor_init}"
	local _cls

	if ${_static} || { ${_default} && [ ${CLASS_TYPE} = interface ]; } || { ( ! ${_default} ) && [ ${CLASS_TYPE} = class ]; }; then
		$_static || [ ${CLASS_TYPE} = interface ] && echo "${_static_prefix}${_type} ${_function}($(echo "${_args}"|sed "s/^${c_class}\\* _self/${C_CLASS}* self/"));"
	fi
}

definition_method_visitor() {
	eval "${method_visitor_init}"
	local _cls

	if ${_static} || { ${_default} && [ ${CLASS_TYPE} = interface ]; } || { ( ! ${_default} ) && [ ${CLASS_TYPE} = class ]; }; then
		if ${_constructor} || [ ${c_class} = ${C_CLASS} ] ; then
			_args=$(echo "${_args}"|sed "s/^${c_class}\\* _self/${C_CLASS}* self/")
		fi
		cat - <<EOF

//! \\memberof ${c_class}
${_static_prefix}${_type} ${_function}(${_args}) {
EOF
		if ${_constructor}; then
			cat - <<EOF
	_${c_class^^}__INIT
	// TODO: Implement
	return self;
}
EOF
		elif [ ${c_class} = ${C_CLASS} ]; then
			cat - <<EOF
	// TODO: Implement
}
EOF
		else
			cat - <<EOF
	${C_CLASS}* self = (${C_CLASS}*) _self;
	// TODO: Implement
}
EOF
		fi
	fi
}

constructor_definition_method_visitor() {
	eval "${method_visitor_init}"
	if ( ! ${_static} ) && [ "${_stereotype}" != constructor ]; then
		if { ${_default} && [ ${CLASS_TYPE} = interface ]; } || { ( ! ${_default} ) && [ ${CLASS_TYPE} = class ]; }; then
			echo -e "\tself->${_name} = ${_name};"
		else
			echo -e "\tself->${_name} = ${c_class}__${_name};"
		fi
	fi
}

include_class_visitor() {
	eval "${class_visitor_init}"
	echo '#include "'${namespace//./\/}/${classname}.h'"'
}

typedef_class_visitor() {
	eval "${class_visitor_init}"
	eval "${methods_class_visitor_init}"
	IFS=$'\n'
	for method in ${methods}; do
		visit_method typedef "${c_class}" "${method}"
	done
	unset IFS
}

attributes_class_visitor() {
	eval "${class_visitor_init}"
	eval "${methods_class_visitor_init}"
	eval "${attributes_class_visitor_init}"

	echo -e "\t// ${c_class}"
	IFS=$'\n'
	for method in ${methods}; do
		visit_method callback "${c_class}" "${method}"
	done
	for attribute in ${attributes}; do
		echo "${attribute}"|awk -F' *: *' '{sub("\\[\\]","*",$2); print "\t" $2 " " $1 ";"}'
	done
	unset IFS
}

method_declaration_class_visitor() {
	eval "${class_visitor_init}"
	eval "${methods_class_visitor_init}"
	IFS=$'\n'
	for method in ${methods}; do
		visit_method declaration "${c_class}" "${method}"
	done
	unset IFS
}

method_definition_class_visitor() {
	eval "${class_visitor_init}"
	eval "${methods_class_visitor_init}"
	IFS=$'\n'
	for method in ${methods}; do
		visit_method definition "${c_class}" "${method}"
	done
	unset IFS
}

constructor_definition_class_visitor() {
	eval "${class_visitor_init}"
	eval "${methods_class_visitor_init}"
	IFS=$'\n'
	for method in ${methods}; do
		visit_method constructor_definition "${c_class}" "${method}"
	done
	unset IFS
}

get_parents() {
	local class=$1
	local id=$(echo ${class}|cut -d : -f 2)
	local parents=$(xmlstarlet sel -B -t -v "//UML:Generalization[@child='${id}']/@parent" "${XMI}";true)
	if [ $MODE} = 'simple' ]; then
		set -- ${parents}
		[ -gt 1 ${#} ] && echo 'The simple mode support only one parent per interface' >&2 && exit 1
	fi
	for id in ${parents}; do
		class=$(echo ${CLASSES}|awk -F: 'BEGIN{ RS = " " } $2 ~ /'${id}'/ { print $0 }')
		echo $class
		get_parents $class
	done
}

header_class_visitor() {
	eval "${class_visitor_init}"
	local cls

	cat - <<EOF
#ifndef _${c_class^^}_H
#define _${c_class^^}_H

#include <stdlib.h>

EOF
	for cls in ${CLASSES}; do
		if [ "${cls}" != "${CLASS}" ]; then
			visit_class include ${cls}
		fi
	done
	echo
	echo "typedef struct _${c_class} ${c_class};"
	echo
	visit_class typedef ${cls}
	echo
	echo "struct _${c_class} {"

	for cls in ${CLASS_HIERARCHY}; do
		visit_class attributes ${cls}
	done
	echo -e '};\n'
	for cls in ${CLASS_HIERARCHY}; do
		visit_class method_declaration ${cls}
	done
	echo -e "\n#endif // _${c_class^^}_H"
}

c_source_class_visitor() {
	eval "${class_visitor_init}"
	local cls

	echo -e '#include <strings.h>\n'

	for cls in ${CLASSES}; do
		if [ "${cls}" = "${CLASS}" ]; then
			visit_class include ${cls}
			echo
		fi
	done

	if [ ${classtype} = class ]; then
		cat - <<EOF
#define _${C_CLASS^^}__INIT \\
	if(self == NULL) { \\
		${C_CLASS}* self = malloc(sizeof(${C_CLASS})); \\
		if(self == NULL) { \\
			return NULL; \\
		} \\
	} \\
	memset(self, 0, sizeof(${C_CLASS})); \\
EOF

		for _cls in ${CLASS_HIERARCHY}; do
			visit_class constructor_definition ${_cls}
		done|sed '$ ! s/$/ \\/'

		for cls in ${CLASS_HIERARCHY}; do
			if [ "${cls}" != "${CLASS}" ]; then
				visit_class method_declaration ${cls}
			fi
		done
	fi

	for cls in ${CLASSES}; do
		if [ "${cls}" = "${CLASS}" ]; then
			visit_class method_definition ${cls}
		fi
	done

	if [ ${classtype} = class ]; then
		for cls in ${CLASS_HIERARCHY}; do
			if [ "${cls}" != "${CLASS}" ]; then
				visit_class method_definition ${cls}
			fi
		done
	fi
}

CLASS_HIERARCHY=$(echo -e "${OBJECT}\n$(get_parents ${CLASS}|tac)\n${CLASS}"|sed '/^$/d'|uniq)
for cls in ${CLASSES}; do
	if [ "${cls}" = "${CLASS}" ]; then
		case "${OUT}" in
			*.c) out=c_source;;
			*.h) out=header;;
			*)   echo "Invalid output file extension for '${OUT}'" >&2; exit 1;;
		esac
		visit_class ${out} ${cls} > "${OUT}" || {
			rm -f "${OUT}"
			exit 1
		}
	fi
done

